{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/cities": {
    "description": "serves an array of all cities objects (in alphabetical order). including: city name, longitude, latitude and radius, filtered by user if username query is given",
    "queries": ["username"]
  },
  "GET /api/users": {
    "description": "serves an array of all user objects",
    "queries": []
  },
  "GET /api/bucket_list": {
    "description": "serves an array of all bucket_list objects",
    "queries": []

  },
  "GET /api/users/username": {
    "description": "serves a user object for the requested username",
    "queries": []
  },
  "GET /api/cities/:city_name": {
    "description": "serves a city object for the requested city_name",
    "queries": []
 
  },
  "GET /api/bucket_list/:username": {
    "description": "serves an array of bucket_list places objects for the requested username, filtered by city if city_name query is given",
    "queries": ["city_name"]
  
  },
  "POST /api/users": {
    "description": "posts a new user to the users table and responds with the posted user, when provided with a body with valid username and password properties e.g. {username: 'newuser2', password: 'passypassword'}",
    "queries": []
  },
  "POST /api/bucket_list": {
    "description": "posts a new place object to the bucket_list table and responds with the posted place, when provided with a body with valid properties e.g. {place_displayname: 'Bullring & Grand Central', place_json: placeDataObject, city_name: 'Birmingham',username: 'madexplorer'}",
    "queries": []
  },
  "DELETE /api/bucket_list/:bucket_list_id": {
    "description": "deletes a places from the bucket_list table according to the provided bucket_list_id",
    "queries": []
  }
}


